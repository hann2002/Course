class Screen {
    static Array screen;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) { 
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, change;
        let addr = (y * 32) + (x / 16);
        let change = Math.bitnum(x & 15);
        if(color){
            let screen[addr] = screen[addr] | change;
        }else{
            let screen[addr] = screen[addr] & ~change;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, x0, y0, x, y, tan;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let x0 = Math.min(x1, x2);
        let y0 = Math.min(y1, y2);
        if(((dx < 0) & (dy > 0)) | ((dx > 0) & (dy < 0))){
            if(dy < 0){
                do Screen.draw(x1, y1, dx, dy);
            } else {
                do Screen.draw(x2, y2, -dx, -dy);
            }
            return;
        }else{
            let dx = Math.abs(dx);
            let dy = Math.abs(dy);
        }
        if(dy = 0){
            do Screen.drawh(x0, y0, dx);
            return;
        }
        if(dx = 0){
            do Screen.drawv(x0, y0, dy);
            return;
        }
        let x = 0;
        let y = 0;
        let tan = 0;
        while(~(x > dx) & ~(y > dy)){
            do Screen.drawPixel(x0 + x, y0 + y);
            if(tan < 0){
                let x = x + 1;
                let tan = tan + dy;               
            }
            else {
                let y = y + 1;
                let tan = tan - dx;
            }
        }       
        return;
    }
    function void drawv(int x, int y, int dy) {
        var int i;
        let i = 0;
        while (~(i > dy)) {
            do Screen.drawPixel(x, y + i);
            let i = i + 1;
        }
        return;
    }
    function void drawh(int x, int y, int dx) {
        var int i;
        let i = 0;
        while (~(i > dx)) {
            do Screen.drawPixel(x + i, y);
            let i = i + 1;
        }
        return;
    }
    function void draw(int x0, int y0, int dx, int dy) {
        var int tan, x, y;
        let tan = 0;
        let x = 0;
        let y = 0;
        while ((~(x > dx)) & (~(y < dy))) {
            do Screen.drawPixel(x0 + x, y0 + y);
            if (tan < 0) {
                let y = y - 1;
                let tan = tan + dx;
            } else {
                let x = x + 1;
                let tan = tan + dy;
            }
        }
        return;    
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy, x0, y0, i;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let x0 = Math.min(x1, x2);
        let y0 = Math.min(y1, y2);
        
        let i = 0;
        while (i < dy) {
            do Screen.drawh(x0, y0 + i, dx); 
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int dis;
        if (r > 181) { 
            return; 
        }
        let dy = -r;
        while (~(dy > r)) {
            let dis = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawh(x-dis, y+dy, 2*dis);
            let dy = dy + 1;
        }
        return;
    }
}
