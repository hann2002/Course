class Math {
    static Array arr;
    /** Initializes the library. */
    function void init() {
        let arr = Array.new(16);
        let arr[0] = 1;
        let arr[1] = 2;
        let arr[2] = 4;
        let arr[3] = 8;
        let arr[4] = 16;
        let arr[5] = 32;
        let arr[6] = 64;
        let arr[7] = 128;
        let arr[8] = 256;
        let arr[9] = 512;
        let arr[10] = 1024;
        let arr[11] = 2048;
        let arr[12] = 4096;
        let arr[13] = 8192;
        let arr[14] = 16384;
        let arr[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shift, i;
        let sum = 0;
        let shift = x;
        let i = 0;
        while (i < 16) {
          if ((y & arr[i]) = arr[i]) {
            let sum = sum + shift;
          }
          let shift = shift + shift;
          let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, ans, y2;
        var boolean pos;
        let pos = ((x < 0) = (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);
        if(y > x){
            return 0;
        }
        if (y = 0) {
            do Sys.error(0); 
        }
        let y2 = Math.multiply(2, y);
        let q = Math.divide(x, y2);
        if((x - (2*q*y)) < y){
            let ans = q + q;
        }else{
            let ans = q + q + 1;
        }

        if(pos){
            return ans;
        }else{
            return -ans;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int ans, j, temp, tempq;
        let ans = 0;
        let j = 7;
        if (x < 0) {
            do Sys.error(1); 
        }
        while(~(j < 0)){
            let temp = ans + arr[j];
            let tempq = temp * temp;
            if(~(tempq > x) & (tempq > 0)){   //avoid overflow
                let ans = temp;
            }
            let j = j-1;
        }
        return ans;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }
    function int bitnum(int i){
        return arr[i];
    }
}
